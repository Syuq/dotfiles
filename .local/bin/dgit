#!/bin/bash

error() { echo -e "$1" && exit; }

[ $EUID -eq 0 ] && error "Do not run this script as root."

flag="$1"
dotfilesDir="$HOME/user/works/repos/dotfiles/"
nvimDir="${HOME}/.config/nvim/"

config() {
    if [[ "${flag}" == "-h" ]]; then
        cd ${HOME}
        git --git-dir="${dotfilesDir}" --work-tree=${HOME} "$@"
    elif [[ "${flag}" == "-v" ]]; then
        cd ${nvimDir}
        git --git-dir="${nvimDir}/.git" --work-tree=${nvimDir} "$@"
    else
        cd ${repoDir}
        git --git-dir="${repoDir}/.git" --work-tree="${repoDir}" "$@"
    fi
}

while :; do
    repoDir="`git rev-parse --show-toplevel 2> /dev/null`"
    [ "$repoDir" = "" ] && [ "$1" = "" ] && error "Cannot detect .git folder!"

    modifiedFiles=(`config ls-files -m`)
    files_size=${#modifiedFiles[@]}
    files=("`for file in "${modifiedFiles[@]}"; do echo "$file" |
        sed -e 's/^/!: /'; done`")

    if [[ "$flag" != "-h" ]]; then
        untrackedFiles=(`config ls-files --others --exclude-standard`)
        tmp=${#untrackedFiles[@]}
        files_size=$((files_size+tmp))
        files=("$files" "`for file in "${untrackedFiles[@]}"; do echo "$file" |
            sed -e 's/^/?: /'; done`")
    fi

    choice="`printf "add\npush\nquit" | rofi -dmenu -p "Git" 2> /dev/null`"

    case "$choice" in
        "add")
            chosenFiles=(`for file in "${files[@]}"; do
                [ "$file" = "" ] && continue
                if [ ${files_size} -eq 1 ]; then
                    printf "${file}"
                else
                    printf "+all\n${file}"
                fi
            done | rofi -dmenu -p "Add" -matching fuzzy 2> /dev/null | cut -d' ' -f2`)

            if [ ${#chosenFiles[@]} -ne 0 ]; then
                if [ "$chosenFiles" = "+all" ]; then
                    config add "$repoDir/."
                else
                    config add "${chosenFiles[@]}"
                [ $? -ne 0 ] && echo "No such file or directory!" && continue
                fi

                commitMsg="`printf "" | rofi -dmenu -l 0 -p "Commit" 2> /dev/null`"
                if [ ${#chosenFiles[@]} -eq 1 ]; then
                    [[ "$commitMsg" = \!* ]] && commitMsg="${commitMsg:1}" ||
                        commitMsg="${chosenFiles[0]##*/}: $commitMsg"
                fi

                config commit -m "$commitMsg"
            fi
            ;;
        "push")
            config push
            ;;
        "quit")
            break
            ;;
    esac
done

exit 0
